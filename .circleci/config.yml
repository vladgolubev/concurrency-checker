orbs:
  node: circleci/node@1.1.6
  aws-cli: circleci/aws-cli@0.1.22
  jira: circleci/jira@1.1.2

commands:
  install_deps:
    steps:
      - node/with-cache:
          cache-version: v1-all
          cache-key: yarn.lock
          dir: ~/repo/node_modules
          use-strict-cache: true
          steps:
            - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
            - run: yarn install --pure-lockfile --ignore-scripts --no-progress

  install_prod_deps:
    steps:
      - node/with-cache:
          cache-version: v1-prod
          cache-key: yarn.lock
          dir: ~/repo/node_modules
          use-strict-cache: true
          steps:
            - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
            - run: yarn install --prod --pure-lockfile --ignore-scripts --no-progress

  install_sls:
    steps:
      - run:
          name: install serverless
          command: |
            curl -o- -L https://slss.io/install | bash
            sudo mv ~/.serverless/bin/serverless /usr/local/bin/serverless

  create_zip:
    steps:
      - run:
          name: cleanup typings leftovers
          command: |
            npx del-cli \
            "node_modules/**/@types/**" \
            "node_modules/**/*.d.ts"

      - run:
          name: create artifact zip with code and node modules
          command: |
            zip --quiet -r --exclude="node_modules/aws-sdk/*" \
              artifact.zip \
              lib node_modules

  package:
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo

      # install dev deps to use Serverless CLI to generate CloudFormation template
      - run: rm -rf node_modules
      - install_deps

      # generate CloudFormation template via Serverless CLI
      - install_sls
      - run: yarn package

      - persist_to_workspace:
          root: ~/repo
          paths:
            - .serverless
            - artifact.zip

  enable_api_gw_xray:
    parameters:
      api_name:
        type: string
    steps:
      - run:
          name: Enable API GW X-Ray
          command: |
            API_NAME="$ENVIRONMENT-<< parameters.api_name >>"
            API_ID=$(aws apigateway get-rest-apis \
              --query="(items[?name == '$API_NAME'].id)" \
              --output text
            )
            aws apigateway update-stage \
              --rest-api-id="$API_ID" \
              --stage-name="$ENVIRONMENT" \
              --patch-operations="op=replace,path=/tracingEnabled,value=true"

  create_base_path_mapping:
    parameters:
      api_name:
        type: string
      domain_name:
        type: string
    steps:
      - run:
          name: Create API GW Base Path Mapping
          command: |
            API_NAME="$ENVIRONMENT-<< parameters.api_name >>"
            API_ID=$(aws apigateway get-rest-apis \
              --query="(items[?name == '$API_NAME'].id)" \
              --output text
            )
            aws apigateway create-base-path-mapping \
              --domain-name="<< parameters.domain_name >>" \
              --rest-api-id="$API_ID" \
              --base-path="<< parameters.api_name >>" \
              --stage="$ENVIRONMENT" || true

version: 2.1

jobs:
  tests:
    executor:
      name: node/default
      tag: '12'
    working_directory: ~/repo
    environment:
      - JEST_JUNIT_OUTPUT_DIR: './test-results/jest'
      - JEST_JUNIT_OUTPUT_NAME: 'results.xml'
    steps:
      - checkout
      - install_deps

      - run: yarn test --maxWorkers=4
      - run: yarn lint:ci
      - run: yarn type-check

      - store_test_results:
          path: test-results

  create_artifact_zip:
    executor:
      name: node/default
      tag: '12'
    working_directory: ~/repo
    steps:
      - checkout

      # install dev deps to babelify code
      - install_deps
      - run: yarn build

      # install prod deps to create artifact zip
      - run: rm -rf node_modules
      - install_prod_deps

      - create_zip

      - persist_to_workspace:
          root: ~/repo
          paths:
            - artifact.zip

  package_staging:
    executor:
      name: node/default
      tag: '12'
    working_directory: ~/repo
    environment:
      - ENVIRONMENT: staging
    steps:
      - package

  deploy_staging:
    executor:
      name: node/default
      tag: '12'
    working_directory: ~/repo
    environment:
      - ENVIRONMENT: staging
    steps:
      - checkout
      - install_deps
      - attach_workspace:
          at: ~/repo

      - install_sls
      - run: yarn deploy

  package_prod:
    executor:
      name: node/default
      tag: '12'
    working_directory: ~/repo
    environment:
      - ENVIRONMENT: prod
    steps:
      - package

  deploy_prod:
    executor:
      name: node/default
      tag: '12'
    working_directory: ~/repo
    environment:
      - ENVIRONMENT: prod
    steps:
      - checkout
      - install_deps
      - attach_workspace:
          at: ~/repo

      - install_sls
      - run: yarn deploy

  api_gw_config_staging:
    executor: aws-cli/default
    environment:
      - ENVIRONMENT: staging
    steps:
      - checkout
      - aws-cli/setup

      - enable_api_gw_xray:
          api_name: xxxxxx

      - create_base_path_mapping:
          api_name: xxxxxx
          domain_name: api.gsstaging.net

  api_gw_config_prod:
    executor: aws-cli/default
    environment:
      - ENVIRONMENT: prod
    steps:
      - checkout
      - aws-cli/setup

      - enable_api_gw_xray:
          api_name: xxxxxx

      - create_base_path_mapping:
          api_name: xxxxxx
          domain_name: api.shelf.io

  run_api_tests_staging:
    executor:
      name: node/default
      tag: '12'
    working_directory: ~/repo
    environment:
      - ENVIRONMENT: staging
      - API_HOST: api.gsstaging.net
    steps:
      - checkout
      - install_deps
      - run: yarn test:integration

  run_api_tests_prod:
    executor:
      name: node/default
      tag: '12'
    working_directory: ~/repo
    environment:
      - ENVIRONMENT: prod
      - API_HOST: api.shelf.io
    steps:
      - checkout
      - install_deps
      - run: yarn test:integration

workflows:
  version: 2

  build_deploy:
    jobs:
      - tests:
          context: npm

      - create_artifact_zip:
          context: npm

      - package_staging:
          context: staging-xxxxxx
          requires:
            - create_artifact_zip
          filters:
            branches:
              only:
                - develop
                - /feature.*/
          post-steps:
            - jira/notify:
                environment_type: staging
                job_type: build

      - package_prod:
          context: staging-xxxxxx
          requires:
            - create_artifact_zip
          filters:
            branches:
              only:
                - master
                - /release.*/
          post-steps:
            - jira/notify:
                environment_type: production
                job_type: build

      - deploy_staging:
          context: staging-xxxxxx
          requires:
            - tests
            - package_staging
          filters:
            branches:
              only:
                - develop
          post-steps:
            - jira/notify:
                environment_type: staging
                job_type: deployment

      - deploy_prod:
          context: prod-xxxxxx
          requires:
            - tests
            - package_prod
          filters:
            branches:
              only:
                - master
          post-steps:
            - jira/notify:
                environment_type: production
                job_type: deployment

      - api_gw_config_staging:
          context: staging-xxxxxx
          requires:
            - deploy_staging

      - api_gw_config_prod:
          context: prod-xxxxxx
          requires:
            - deploy_prod

      - run_api_tests_staging:
          context: staging-xxxxxx
          requires:
            - deploy_staging

      - run_api_tests_prod:
          context: prod-xxxxxx
          requires:
            - deploy_prod
