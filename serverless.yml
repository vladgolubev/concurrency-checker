service: xxxxxx

unresolvedVariablesNotificationMode: error

provider:
  timeout: 10
  memorySize: 1536
  name: aws
  stage: ${env:ENVIRONMENT}
  region: ${env:AWS_DEFAULT_REGION}
  runtime: nodejs14.x
  endpointType: REGIONAL
  versionFunctions: false
  tracing:
    lambda: true
  deploymentBucket: ${ssm:/${self:provider.stage}/sls_artifacts_s3_bucket_name}
  logRetentionInDays: 400
  logs:
    restApi:
      accessLogging: true
      format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency,"xrayTraceId":"$context.xrayTraceId","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus","authorizeStatus":"$context.authorize.status","authorizerStatus":"$context.authorizer.status","authorizerLatency":"$context.authorizer.latency","authorizerRequestId":"$context.authorizer.requestId","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent","principalId":"$context.authorizer.principalId"}'
      executionLogging: false # Turn off execution logs b/c they're too noisy.
  apiGateway:
    minimumCompressionSize: 0
    shouldStartNameWithService: false
  apiName: ${self:provider.stage}-${self:service}
  stackTags:
    Environment: ${self:provider.stage}
    Project: ${self:service}
    Service: ${self:service}
    Serverless: 'true'
  tags:
    # For Datadog APM
    env: ${self:provider.stage}
    service: xxxxxx
  environment:
    ENVIRONMENT: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'xray:PutTraceSegments'
            - 'xray:PutTelemetryRecords'
          Resource:
            - '*'

        - Effect: 'Allow'
          Action:
            - 'kms:CreateGrant'
            - 'kms:Decrypt'
            - 'kms:Encrypt'
            - 'kms:GenerateDataKey'
          Resource:
            - 'arn:aws:kms:*:*:key/${ssm:/${self:provider.stage}/kms_key_id}'

package:
  artifact: artifact.zip

plugins:
  - serverless-associate-waf
  - serverless-iam-roles-per-function
  - serverless-tag-cloud-watch-log-groups

custom:
  associateWaf:
    name: ${env:ENVIRONMENT}-generic-owasp-acl
  serverless-iam-roles-per-function:
    defaultInherit: true
  cloudWatchLogsTags:
    Environment: ${env:ENVIRONMENT}
    Project: ${self:service}

functions:
  someLambdaName:
    handler: lib/some-lambda-name/handler.handler
    name: ${self:provider.stage}-${self:service}-someLambdaName
    tags:
      name: someLambdaName
    events:
      - http:
          path: /{id}
          method: post
          integration: lambda-proxy
          cors: true
          authorizer:
            arn: ${ssm:/${env:ENVIRONMENT}/auth/lambda_authorizers/all_arn}
            resultTtlInSeconds: 0
          request:
            parameters:
              paths:
                id: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'ssm:GetParameters'
        Resource:
          - '${ssm:/${env:ENVIRONMENT}/ssm_arn_prefix}/common/mongo_url/full'
      - Effect: 'Allow'
        Action:
          - 'dynamodb:BatchWriteItem'
          - 'dynamodb:Query'
          - 'dynamodb:UpdateItem'
        Resource:
          - 'arn:aws:dynamodb:*:*:table/${self:provider.stage}_gems_xxxxxx'
      - Effect: 'Allow'
        Action:
          - 'sns:Publish'
        Resource:
          - '${ssm:/${env:ENVIRONMENT}/sns_arn_prefix}_gem-rating-added'

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:provider.stage}-${self:service}
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: DEFAULT_4XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseTemplates:
          application/json: '{"message":$context.error.messageString}'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: DEFAULT_5XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseTemplates:
          application/json: '{"message":$context.error.messageString}'
